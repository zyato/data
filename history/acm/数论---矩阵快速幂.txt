#include <cstring>
#include <cstdio>
#include <iostream>
using namespace std;
typedef long long ll;
const int maxn = 7;
const long long mod = 2147493647;
ll ans[7][7], cnt[7][7], temp[7][7];
ll ARR[7][7] = { 1, 2, 1, 4, 6, 4, 1,
                1, 0, 0, 0, 0, 0, 0,
                0, 0, 1, 4, 6, 4, 1,
                0, 0, 0, 1, 3, 3, 1,
                0, 0, 0, 0, 1, 2, 1,
                0, 0, 0, 0, 0, 1, 1,
                0, 0, 0, 0, 0, 0, 1 };

void MatrixMul(ll a[][maxn], ll b[][maxn]) {
    memset(temp, 0, sizeof(temp));
    for (int i = 0; i < maxn; i++)
        for (int j = 0; j < maxn; j++)
            for (int k = 0; k < maxn; k++)
                temp[i][j] = (temp[i][j] + (a[i][k] * b[k][j]) % mod) % mod;
    for (int i = 0; i < maxn; i++)
        for (int j = 0; j < maxn; j++)
            a[i][j] = temp[i][j];
}

void QuickPow(ll ans[][maxn], ll k) {
    for (int i = 0; i < maxn; i++) {
        for (int j = 0; j < maxn; j++) {
            cnt[i][j] = ARR[i][j];
        }
    }
    memset(ans, 0, sizeof(ans));
    for (int i = 0; i < maxn; i++)
        ans[i][i] = 1;
    while (k) {
        if (k & 1) MatrixMul(ans, cnt);
        MatrixMul(cnt, cnt);
        k >>= 1;
    }
}

int main() {
    int T;
    scanf("%d", &T);
    while (T--) {
        ll n, a, b;
        scanf("%lld%lld%lld", &n, &a, &b);
        if (n == 1) printf("%lld\n", a);
        else if (n == 2) printf("%lld\n", b);
        else {
            memset(ans, 0, sizeof(ans));
            QuickPow(ans, n - 2);
            ll ans1 = (ans[0][0] * b % mod + ans[0][1] * a % mod + ans[0][2] * 16 % mod
                + ans[0][3] * 8 % mod + ans[0][4] * 4 % mod + ans[0][5] * 2 % mod + ans[0][6] % mod) % mod;
            printf("%lld\n", ans1);
        }
    }
    return 0;
}
