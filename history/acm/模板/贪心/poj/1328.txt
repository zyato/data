Radar Installation
Time Limit: 1000MS	 	Memory Limit: 10000K
Total Submissions: 90541	 	Accepted: 20340
Description

Assume the coasting is an infinite straight line. Land is in one side of coasting, sea in the other. Each small island is a point locating in the sea side. And any radar installation, locating on the coasting, can only cover d distance, so an island in the sea can be covered by a radius installation, if the distance between them is at most d. 

We use Cartesian coordinate system, defining the coasting is the x-axis. The sea side is above x-axis, and the land side below. Given the position of each island in the sea, and given the distance of the coverage of the radar installation, your task is to write a program to find the minimal number of radar installations to cover all the islands. Note that the position of an island is represented by its x-y coordinates. 
 
Figure A Sample Input of Radar Installations


Input

The input consists of several test cases. The first line of each case contains two integers n (1<=n<=1000) and d, where n is the number of islands in the sea and d is the distance of coverage of the radar installation. This is followed by n lines each containing two integers representing the coordinate of the position of each island. Then a blank line follows to separate the cases. 

The input is terminated by a line containing pair of zeros 
Output

For each test case output one line consisting of the test case number followed by the minimal number of radar installations needed. "-1" installation means no solution for that case.
Sample Input

3 2
1 2
-3 1
2 1

1 2
0 2

0 0
Sample Output

Case 1: 2
Case 2: 1
Source

Beijing 2002

题目大意：现在有一些点纵坐标大于等于0，现在题目给出圆的半径，现在问你最少要多少个圆（圆心在x轴上）使得每个点一定在其中的某个圆内。

题目分析：看到这个题要让点在圆内，而且圆心位于x轴上，这有什么用呢？首先算出圆心的位置这肯定是不现实的，因为我们只知道圆的半径，但是换种思路想，圆心出现在什么位置时会使得点一定在圆内了，是否我们找到它的边界条件（点到圆心的距离刚好是R）就行了，不防先画个图。



不难看出o点在[l,r]内距离是小于等于R的，也就是说当圆心位于这个区间上时，圆心与o点之间距离小于R。知道圆心该放在什么地方，这个题目就很简单了。以区间的左边界从小到大排序，对于每一个新的区间，判断与原来区间是否有交集，有则把原区间更新为这个交集，否则让圆的个数加一，最后输出答案即可（题目给出的点y坐标可能小于0，直接跳过就行）。

代码：
[cpp] view plain copy
<span style="font-size:18px;">#include <algorithm>  
#include <iostream>  
#include <string.h>  
#include <stdio.h>  
#include <cmath>  
  
using namespace std;  
const int maxn=2000;  
int n,Case;  
double R;  
struct Coor{  
    double x,y;  
};  
Coor coor[maxn];  
  
struct Region{  
    double l,r;  
};  
Region reg[maxn];  
  
bool cmp(Region a,Region b)  
{  
    return a.l<b.l;  
}  
  
int main()  
{  
    //freopen("in.txt","r",stdin);  
    //freopen("out->txt","w",stdout);  
    while(scanf("%d%lf",&n,&R)!=EOF&&(n||R))  
    {  
        int flag=0;  
        for(int i=1;i<=n;i++){  
            scanf("%lf%lf",&coor[i].x,&coor[i].y);  
            if(coor[i].y>R){  
                flag=1;  
            }  
        }  
        if(flag){  
            printf("Case %d: -1\n",++Case);  
            continue;  
        }  
        int len=1;  
        for(int i=1;i<=n;i++){  
            double x=coor[i].x,y=coor[i].y;  
            if(y<0) continue;  
            double val=sqrt(R*R-y*y);  
            double l=x-val,r=x+val;  
            reg[len].l=l;reg[len].r=r;  
            len++;  
        }  
        if(len<1){  
            printf("Case %d: -1\n",++Case);  
            continue;  
        }  
        sort(reg+1,reg+len,cmp);  
        int ans=1;  
        double l=reg[1].l,r=reg[1].r;  
        for(int i=2;i<len;i++){  
            if(reg[i].l>r){  
                ans++;  
                l=reg[i].l;  
                r=reg[i].r;  
            } else {  
                l=max(reg[i].l,l);  
                r=min(reg[i].r,r);  
            }  
        }  
        printf("Case %d: %d\n",++Case,ans);  
    }  
    return 0;  
}  
</span>