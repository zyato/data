#include <cmath>  
#include <vector>  
#include <string>  
#include <stdio.h>  
#include <string.h>  
#include <iostream>  
#include <algorithm>  
using namespace std;  
#define lson l,m,rt<<1  
#define rson m+1,r,rt<<1|1  
typedef unsigned long long LL;  
const int maxn=500000;  
int tree[maxn<<2];  
LL ans=0,INF=~0ULL;  
int best,n,k;  
int p[16] = {2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53};  
  
struct Kid{  
    int val;  
    char name[100];  
};  
Kid kid[maxn];  
  
void PushUp(int rt)  
{  
    tree[rt]=tree[rt<<1]+tree[rt<<1|1];  
}  
  
void build(int l,int r,int rt)  
{  
    if(l==r){  
        tree[rt]=1;  
        return;  
    }  
    int m=(l+r)>>1;  
    build(lson);  
    build(rson);  
    PushUp(rt);  
}  
  
int query(int pos,int l,int r,int rt)  
{  
    int ans;  
    if(l==r){  
        tree[rt]--;  
        return l;  
    }  
    int m=(l+r)>>1;  
    if(pos<=tree[rt<<1])    ans=query(pos,lson);  
    else    ans=query(pos-tree[rt<<1],rson);  
    PushUp(rt);  
    return ans;  
}  
  
void dfs(int depth,LL tmp,LL num)  
{  
    if(depth>=16)   return;  
    if(num>best){  
        best=num;  
        ans=tmp;  
    }  
    if(num==best&&ans>tmp){  
        ans=tmp;  
    }  
    for(int i=1;i<=63;i++){  
        if(n/p[depth]<tmp) break;  
        dfs(depth+1,tmp*=p[depth],num*(i+1));  
    }  
}  
  
int main()  
{  
    //freopen("in.txt","r",stdin);  
    //freopen("out.txt","w",stdout);  
    while(scanf("%d%d",&n,&k)!=EOF)  
    {  
        ans=INF;best=0;  
        dfs(0,1,1);  
        for(int i=1;i<=n;i++){  
            scanf("%s %d",&kid[i].name,&kid[i].val);  
        }  
        int cnt=n;  
        build(1,n,1);  
        for(int i=1;i<=n;i++){  
            cnt--;  
            int pos=query(k,1,n,1);  
            if(i==ans){  
                printf("%s %d\n",kid[pos].name,best);  
                break;  
            }  
            if(cnt==0)  break;  
            if(kid[pos].val>=0){  
                k=(k+kid[pos].val-2)%cnt+1;  
            } else {  
                k=((k+kid[pos].val-1)%cnt+cnt)%cnt+1;  
            }  
        }  
    }  
    return 0;  
}