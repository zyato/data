#include<cstdio>
#include<cstring>
#include<queue>
#include<cmath>
using namespace std;

typedef long long int64;

const int Ni = 210;
const int64 MAX = 1LL<<50;

struct Edge{
    int u,v,c;
    int next;
}edge[20*Ni];
int n,m;
int edn;
int p[Ni];
int d[Ni];
int sp,tp;

void addedge(int u,int v,int c)
{
    edge[edn].u=u; edge[edn].v=v; edge[edn].c=c;
    edge[edn].next=p[u]; p[u]=edn++;

    edge[edn].u=v; edge[edn].v=u; edge[edn].c=0;
    edge[edn].next=p[v]; p[v]=edn++;
}
int bfs()
{
    queue <int> q;
    memset(d,-1,sizeof(d));
    d[sp]=0;
    q.push(sp);
    while(!q.empty())
    {
        int cur=q.front();
        q.pop();
        for(int i=p[cur];i!=-1;i=edge[i].next)
        {
            int u=edge[i].v;
            if(d[u]==-1 && edge[i].c>0)
            {
                d[u]=d[cur]+1;
                q.push(u);
            }
        }
    }
    return d[tp] != -1;
}
int64 dfs(int a,int64 b)
{
    int64 r=0;
    if(a==tp)return b;
    for(int i=p[a];i!=-1 && r<b;i=edge[i].next)
    {
        int u=edge[i].v;
        if(edge[i].c>0 && d[u]==d[a]+1)
        {
            int64 x=min((int64)edge[i].c,b-r);
            x=dfs(u,x);
            r+=x;
            edge[i].c-=x;
            edge[i^1].c+=x;
        }
    }
    if(!r)d[a]=-2;
    return r;
}

int64 dinic(int sp,int tp)
{
    int64 total=0,t;
    while(bfs())
    {
        while(t=dfs(sp,MAX))
            total+=t;
    }
    return total;
}
int main()
{
    int T;
    scanf("%d", &T);
    while(T--)
    {
     
        int i,u,v,c;
        scanf("%d%d",&n,&m);
        scanf("%d%d",&sp,&tp);

        edn=0;
        memset(p,-1,sizeof(p));
        for(i=0;i<m;i++)
        {
            scanf("%d%d%d",&u,&v,&c);
            addedge(u,v,c * 1001 + 1);
        }
        int64 mincut = dinic(sp,tp);
        
        printf("%d\n", mincut % 1001);
    }
}