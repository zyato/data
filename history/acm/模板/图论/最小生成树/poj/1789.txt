Truck History
Time Limit: 2000MS	 	Memory Limit: 65536K
Total Submissions: 27508	 	Accepted: 10690
Description

Advanced Cargo Movement, Ltd. uses trucks of different types. Some trucks are used for vegetable delivery, other for furniture, or for bricks. The company has its own code describing each type of a truck. The code is simply a string of exactly seven lowercase letters (each letter on each position has a very special meaning but that is unimportant for this task). At the beginning of company's history, just a single truck type was used but later other types were derived from it, then from the new types another types were derived, and so on. 

Today, ACM is rich enough to pay historians to study its history. One thing historians tried to find out is so called derivation plan -- i.e. how the truck types were derived. They defined the distance of truck types as the number of positions with different letters in truck type codes. They also assumed that each truck type was derived from exactly one other truck type (except for the first truck type which was not derived from any other type). The quality of a derivation plan was then defined as 
1/Σ(to,td)d(to,td)

where the sum goes over all pairs of types in the derivation plan such that to is the original type and td the type derived from it and d(to,td) is the distance of the types. 
Since historians failed, you are to write a program to help them. Given the codes of truck types, your program should find the highest possible quality of a derivation plan. 
Input

The input consists of several test cases. Each test case begins with a line containing the number of truck types, N, 2 <= N <= 2 000. Each of the following N lines of input contains one truck type code (a string of seven lowercase letters). You may assume that the codes uniquely describe the trucks, i.e., no two of these N lines are the same. The input is terminated with zero at the place of number of truck types.
Output

For each test case, your program should output the text "The highest possible quality is 1/Q.", where 1/Q is the quality of the best derivation plan.
Sample Input

4
aaaaaaa
baaaaaa
abaaaaa
aabaaaa
0
Sample Output

The highest possible quality is 1/3.

题目大意：现在n辆卡车，每辆卡车的类型由7个小写字母编码而成，现在定义d（a，b）是第a辆和第b辆货车之间的距离，且该表达式的值等于他们编码的7个小写字母不同个数，例如a为aaaaaaa，b为aaaaaab，他们的第7个字母不同，所以d（a，b）=1，然后求一个最小生成树，使得d的和最小，输出这个数的倒数。



题目分析：就是题目有点恶心，看了半天没看懂，就是简单的最小生成树的prim算法的实现，但是要注意visit数组要记得初始化为0，想哭，挂在这好几次。。。



代码：


[cpp] view plain copy
<span style="font-family:Microsoft YaHei;font-size:18px;">#include <iostream>  
#include <string.h>  
  
  
using namespace std;  
#define size 5000  
#define MAX 8  
  
  
struct Node{  
    char a[10];  
}str[size];  
  
  
int visit[size],map[size][size]={0};  
  
  
int main()  
{  
    int n;  
    while(cin>>n&&n)  
    {  
        memset(visit,0,sizeof(visit));  
        long long sum=0;  
        for(int i=0;i<n;i++){  
            cin>>str[i].a;  
        }  
        for(int i=0;i<n;i++){      <span style="white-space:pre">        </span>//按照题目意思求出两辆货车之间的d值，如果是i，j值相等，赋为最大值              
            map[i][i]=MAX;  
            for(int j=0;j<i;j++){  
                int unsame=0;  
                for(int k=0;k<MAX-1;k++){  
                    if(str[i].a[k]!=str[j].a[k]){  
                        unsame++;  
                    }  
                }  
                map[i][j]=map[j][i]=unsame;  
            }  
        }  
        visit[0]=1;  
        for(int i=0;i<n-1;i++){<span style="white-space:pre">            </span>//prim算法的实现  
            int MIN=MAX,j1=-1;  
            for(int j=0;j<n;j++){  
                if(!visit[j]&&MIN>map[0][j]){  
                    MIN=map[0][j];  
                    j1=j;  
                }  
            }  
            visit[j1]=1;  
            sum+=MIN;  
            for(int j=0;j<n;j++){  
                if(!visit[j]&&map[j1][j]<map[0][j]){  
                    map[0][j]=map[j1][j];  
                }  
            }  
        }  
        cout<<"The highest possible quality is 1/"<<sum<<"."<<endl;  
    }  
    return 0;  
}</span>  