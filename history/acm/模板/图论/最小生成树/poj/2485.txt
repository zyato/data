Highways
Time Limit: 1000MS	 	Memory Limit: 65536K
Total Submissions: 30647	 	Accepted: 13933
Description

The island nation of Flatopia is perfectly flat. Unfortunately, Flatopia has no public highways. So the traffic is difficult in Flatopia. The Flatopian government is aware of this problem. They're planning to build some highways so that it will be possible to drive between any pair of towns without leaving the highway system. 

Flatopian towns are numbered from 1 to N. Each highway connects exactly two towns. All highways follow straight lines. All highways can be used in both directions. Highways can freely cross each other, but a driver can only switch between highways at a town that is located at the end of both highways. 

The Flatopian government wants to minimize the length of the longest highway to be built. However, they want to guarantee that every town is highway-reachable from every other town.
Input

The first line of input is an integer T, which tells how many test cases followed. 
The first line of each case is an integer N (3 <= N <= 500), which is the number of villages. Then come N lines, the i-th of which contains N integers, and the j-th of these N integers is the distance (the distance should be an integer within [1, 65536]) between village i and village j. There is an empty line after each test case.
Output

For each test case, you should output a line contains an integer, which is the length of the longest road to be built such that all the villages are connected, and this value is minimum.
Sample Input

1

3
0 990 692
990 0 179
692 179 0
Sample Output

692

题目大意：给你n个村庄，要求用公路将他们联通且公路长度尽可能短，输出使公路最短的情况下，两个村庄之间距离的最大值。



题目分析：最小生成树的prim算法即可解决，只是需注意输出的不是总公路的长度。



代码：


[cpp] view plain copy
<span style="font-family:Microsoft YaHei;font-size:18px;">
#include <iostream>  
#include <cstring>  
  
using namespace std;  
#define size 600  
#define MAX 999999  
int main()  
{  
    int n,t;  
    int a[size][size], visit[size];  
    cin>>t;  
    while (t--)  
    {  
        int sum;  
        cin>>n;  
        memset(visit, 0, sizeof(visit));      //把标记数组初始化为0 0 未访问过的节点  
        for (int i = 1; i <= n; i++){  
            for (int j = 1; j <= n; j++){  
                cin >> a[i][j];  
            }  
        }  
        visit[1] = 1;  
        for (int t = 1; t < n; t++){  
            int MIN =MAX, i1 = -1, j1 = -1;  
            for (int i = 1; i <= n; i++){  
                for (int j = i + 1; j <= n; j++){  
                    if ((visit[i] + visit[j] == 1) && MIN>a[i][j]){     //找到最小权值  
                        MIN = a[i][j];  
                        i1 = i;  
                        j1 = j;  
                    }  
                }  
            }  
            if(t==1){                           //找到最大的边  
                sum=MIN;  
            }  
            else{  
                sum=max(sum,MIN);  
            }  
            if (visit[i1] == 0){                //把被访问过的节点标记为1  
                visit[i1] = 1;  
            }  
            else if (visit[j1] == 0){  
                visit[j1] = 1;  
            }  
        }  
        cout << sum << endl;  
    }  
    return 0;  
}  
</span>  