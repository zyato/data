A Walk Through the Forest
Time Limit: 2000/1000 MS (Java/Others)    Memory Limit: 65536/32768 K (Java/Others)
Total Submission(s): 8664    Accepted Submission(s): 3207


Problem Description
Jimmy experiences a lot of stress at work these days, especially since his accident made working difficult. To relax after a hard day, he likes to walk home. To make things even nicer, his office is on one side of a forest, and his house is on the other. A nice walk through the forest, seeing the birds and chipmunks is quite enjoyable. 
The forest is beautiful, and Jimmy wants to take a different route everyday. He also wants to get home before dark, so he always takes a path to make progress towards his house. He considers taking a path from A to B to be progress if there exists a route from B to his home that is shorter than any possible route from A. Calculate how many different routes through the forest Jimmy might take. 
 

Input
Input contains several test cases followed by a line containing 0. Jimmy has numbered each intersection or joining of paths starting with 1. His office is numbered 1, and his house is numbered 2. The first line of each test case gives the number of intersections N, 1 < N ≤ 1000, and the number of paths M. The following M lines each contain a pair of intersections a b and an integer distance 1 ≤ d ≤ 1000000 indicating a path of length d between intersection a and a different intersection b. Jimmy may walk a path any direction he chooses. There is at most one path between any pair of intersections. 
 

Output
For each test case, output a single integer indicating the number of different routes through the forest. You may assume that this number does not exceed 2147483647
 

Sample Input
5 6
1 3 2
1 4 2
3 4 3
1 5 12
4 2 34
5 2 24
7 8
1 3 1
1 4 1
3 7 1
7 4 1
7 5 1
6 7 1
5 2 1
6 2 1
0
 

Sample Output
2
4
 

Source
University of Waterloo Local Contest 2005.09.24
 

Recommend
Eddy   |   We have carefully selected several similar problems for you:  1217 1385 1162 1596 1301 

题目大意：因为是参考了一下大神的代码，所以直接贴大神思路了。

代码：
[cpp] view plain copy
<span style="font-family:KaiTi_GB2312;font-size:18px;">#include <iostream>  
  
using namespace std;  
const int INF=1<<30;  
const int Size=1010;  
int sum[Size];  
int len[Size][Size];  
int visit[Size];  
int Distance[Size];  
  
void dijkstra(int start,int size)  
{  
    for(int i=1;i<=size;i++){  
        visit[i]=0;  
        Distance[i]=INF;  
    }  
    Distance[start]=0;  
    for(int i=1;i<=size;i++){  
        int pos=-1,MIN=INF;  
        for(int j=1;j<=size;j++){  
            if(!visit[j]&&Distance[j]<MIN){  
                MIN=Distance[j];  
                pos=j;  
            }  
        }  
        if(pos==-1){  
            break;  
        }  
        visit[pos]=1;  
        for(int j=1;j<=size;j++){  
            Distance[j]=min(Distance[j],Distance[pos]+len[pos][j]);  
        }  
    }  
}  
  
int dfs(int v,int n)  
{  
    int sum1=0;  
    if(sum[v]!=-1){  
        return sum[v];  
    }  
    if(v==2){  
        return 1;  
    }  
    for(int i=1;i<=n;i++){  
        if(len[v][i]!=INF&&Distance[v]>Distance[i]){  
            sum1+=dfs(i,n);  
        }  
    }  
    sum[v]=sum1;  
    return sum[v];  
}  
  
int main()  
{  
    int n,m,a,b,distance;  
    while(cin>>n&&n)  
    {  
        cin>>m;  
        for(int i=1;i<=n;i++){  
            sum[i]=-1;  
            for(int j=1;j<=n;j++){  
                len[i][j]=INF;  
            }  
        }  
        for(int i=1;i<=m;i++){  
            cin>>a>>b>>distance;  
            if(len[a][b]>distance){  
                len[a][b]=len[b][a]=distance;  
            }  
        }  
        dijkstra(2,n);  
        cout<<dfs(1,n)<<endl;  
    }  
    return 0;  
}</span><span style="font-size:14px;">  
</span>  