一个人的旅行
Time Limit: 1000/1000 MS (Java/Others)    Memory Limit: 32768/32768 K (Java/Others)
Total Submission(s): 37487    Accepted Submission(s): 12759


Problem Description
虽然草儿是个路痴（就是在杭电待了一年多，居然还会在校园里迷路的人，汗~),但是草儿仍然很喜欢旅行，因为在旅途中 会遇见很多人（白马王子，^0^），很多事，还能丰富自己的阅历，还可以看美丽的风景……草儿想去很多地方，她想要去东京铁塔看夜景，去威尼斯看电影，去阳明山上看海芋，去纽约纯粹看雪景，去巴黎喝咖啡写信，去北京探望孟姜女……眼看寒假就快到了，这么一大段时间，可不能浪费啊，一定要给自己好好的放个假，可是也不能荒废了训练啊，所以草儿决定在要在最短的时间去一个自己想去的地方！因为草儿的家在一个小镇上，没有火车经过，所以她只能去邻近的城市坐火车（好可怜啊~）。
 

Input
输入数据有多组，每组的第一行是三个整数T，S和D，表示有T条路，和草儿家相邻的城市的有S个，草儿想去的地方有D个；
接着有T行，每行有三个整数a，b，time,表示a,b城市之间的车程是time小时；(1=<(a,b)<=1000;a,b 之间可能有多条路)
接着的第T+1行有S个数，表示和草儿家相连的城市；
接着的第T+2行有D个数，表示草儿想去地方。
 

Output
输出草儿能去某个喜欢的城市的最短时间。
 

Sample Input
6 2 3
1 3 5
1 4 7
2 8 12
3 8 4
4 9 12
9 10 2
1 2
8 9 10
 

Sample Output
9
 

Author
Grass
 

Source
RPG专场练习赛
 

Recommend
lcy   |   We have carefully selected several similar problems for you:  1874 2112 1217 1142 1385 

题目大意：已知一些城市之间车程，现在小草家与s个城市相连，他想去的城市有d个，现在求小草到他喜欢的某个城市的最短时间是多少？（小草家到城市之间的时间不用计算）

题目分析：我的想法是直接遍历每一种可能，然后找出最短时间。具体实现是利用了dijkstra算法，对于每个起点都进行一次计算，然后找出其中到小草喜欢的城市的最短的时间，然后找出s个起点的最短时间的最小值。

代码：
[cpp] view plain copy
<span style="font-family:KaiTi_GB2312;font-size:18px;">#include <iostream>  
  
using namespace std;  
const int size=1010;  
const int inf=1<<30;  
int T,S,D,ans,n;  
int a,b,value;  
int scity[size],dcity[size],visit[size],Distance[size],map[size][size];  
  
void dijkstra(int start)  
{  
    for(int i=1;i<n;i++){       //初始化  
        visit[i]=0;  
        Distance[i]=inf;  
    }  
    Distance[start]=0;          //到自己的距离为0  
    for(int i=1;i<n;i++){  
        int pos=-1,MIN=inf;  
        for(int j=1;j<n;j++){  
            if(!visit[j]&&Distance[j]<MIN){     //每次寻找最短的距离  
                MIN=Distance[j];  
                pos=j;  
            }  
        }  
        if(pos==-1){       
            return;  
        }  
        visit[pos]=1;  
        for(int j=1;j<n;j++){                   //距离的更新  
            Distance[j]=min(Distance[j],Distance[pos]+map[pos][j]);  
        }  
    }  
}  
  
int main()  
{  
    while(cin>>T>>S>>D)  
    {  
        for(int i=1;i<size;i++){            //初始化  
            for(int j=1;j<size;j++){  
                map[i][j]=map[j][i]=inf;  
            }  
        }  
        for(int i=1;i<=T;i++){              //更新距离  
            cin>>a>>b>>value;  
            n=max(n,a);                     //找出城市最大的编号  
            n=max(n,b);  
            if(map[a][b]>value){  
                map[a][b]=map[b][a]=value;  
            }  
        }  
        n++;                                   
        for(int i=1;i<=S;i++){  //相邻的城市  
            cin>>scity[i];  
        }  
        for(int i=1;i<=D;i++){  //想去的城市  
            cin>>dcity[i];  
        }  
        ans=inf;  
        for(int i=1;i<=S;i++){  
            dijkstra(scity[i]);     //对于每个起点都执行一次dijkstra算法  
            for(int j=1;j<=D;j++){  
                ans=ans<Distance[dcity[j]]?ans:Distance[dcity[j]];      //找出其中的最短车程  
            }  
        }  
        cout<<ans<<endl;  
    }  
    return 0;  
}  
</span>  