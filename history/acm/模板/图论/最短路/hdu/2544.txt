最短路
Time Limit: 5000/1000 MS (Java/Others)    Memory Limit: 32768/32768 K (Java/Others)
Total Submission(s): 64915    Accepted Submission(s): 28424


Problem Description
在每年的校赛里，所有进入决赛的同学都会获得一件很漂亮的t-shirt。但是每当我们的工作人员把上百件的衣服从商店运回到赛场的时候，却是非常累的！所以现在他们想要寻找最短的从商店到赛场的路线，你可以帮助他们吗？

 

Input
输入包括多组数据。每组数据第一行是两个整数N、M（N<=100，M<=10000），N表示成都的大街上有几个路口，标号为1的路口是商店所在地，标号为N的路口是赛场所在地，M则表示在成都有几条路。N=M=0表示输入结束。接下来M行，每行包括3个整数A，B，C（1<=A,B<=N,1<=C<=1000）,表示在路口A与路口B之间有一条路，我们的工作人员需要C分钟的时间走过这条路。
输入保证至少存在1条商店到赛场的路线。
 

Output
对于每组输入，输出一行，表示工作人员从商店走到赛场的最短时间
 

Sample Input
2 1
1 2 3
3 3
1 2 5
2 3 5
3 1 2
0 0
 

Sample Output
3
2
 

Source
UESTC 6th Programming Contest Online
 

Recommend
lcy   |   We have carefully selected several similar problems for you:  2066 1874 1217 2112 1142 

题目分析：第一次做最短路问题，主要是借鉴了一下大神的博客，废话不多说，直接贴代码吧。传送门

代码：
[html] view plain copy
<span style="font-family:KaiTi_GB2312;font-size:18px;">#include <iostream>  
#include <memory.h>  
#include <stdio.h>  
  
using namespace std;  
const int inf=1<<30;  
const int size=102;  
int n,m;  
int map[size][size],Distance[size],visit[size];  
  
void dijkstra(int start)  
{  
    memset(visit,0,sizeof(visit));  
    for(int i=1;i<=n;i++){  
        Distance[i]=inf;  
    }  
    Distance[start]=0;  
    for(int i=1;i<=n;i++){  
        int x=-1,Min=inf;  
        for(int j=1;j<=n;j++){  
            if(!visit[j]&&Distance[j]<Min){  
                Min=Distance[j];  
                x=j;  
            }  
        }  
        if(x==-1){  
            return;  
        }  
        visit[x]=1;  
        for(int j=1;j<=n;j++){  
            Distance[j]=min(Distance[j],Distance[x]+map[x][j]);  
        }  
    }  
  
}  
  
int main()  
{  
    while(cin>>n>>m)  
    {  
        if(m==0&&n==0){  
            break;  
        }  
        int a,b,c;  
        for(int i=1;i<=n;i++){  
            for(int j=1;j<=n;j++){  
                map[i][j]=map[j][i]=inf;  
            }  
        }  
        for(int i=1;i<=m;i++){  
            cin>>a>>b>>c;  
            if(c<map[a][b])  
                map[a][b]=map[b][a]=c;  
        }  
        dijkstra(1);  
        cout<<Distance[n]<<endl;  
    }  
    return 0;  
}  
</span> 