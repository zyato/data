AGTC
Time Limit: 1000MS	 	Memory Limit: 65536K
Total Submissions: 13074	 	Accepted: 4926
Description

Let x and y be two strings over some finite alphabet A. We would like to transform x into y allowing only operations given below:

Deletion: a letter in x is missing in y at a corresponding position.
Insertion: a letter in y is missing in x at a corresponding position.
Change: letters at corresponding positions are distinct
Certainly, we would like to minimize the number of all possible operations.

Illustration
A G T A A G T * A G G C

| | |       |   |   | |

A G T * C * T G A C G C
Deletion: * in the bottom line
Insertion: * in the top line
Change: when the letters at the top and bottom are distinct
This tells us that to transform x = AGTCTGACGC into y = AGTAAGTAGGC we would be required to perform 5 operations (2 changes, 2 deletions and 1 insertion). If we want to minimize the number operations, we should do it like

A  G  T  A  A  G  T  A  G  G  C

|  |  |        |     |     |  |

A  G  T  C  T  G  *  A  C  G  C
and 4 moves would be required (3 changes and 1 deletion).

In this problem we would always consider strings x and y to be fixed, such that the number of letters in x is m and the number of letters in y is n where n ≥ m.

Assign 1 as the cost of an operation performed. Otherwise, assign 0 if there is no operation performed.

Write a program that would minimize the number of possible operations to transform any string x into a string y.

Input

The input consists of the strings x and y prefixed by their respective lengths, which are within 1000.

Output

An integer representing the minimum number of possible operations to transform any string x into a string y.

Sample Input

10 AGTCTGACGC
11 AGTAAGTAGGC
Sample Output

4
Source

Manila 2006


题目大意：给你两个字符串，可以随意插入，改变，删除的字符，求最少执行多少次操作后能够使得这两个字符串相等。



题目分析：算法很简单，没什么好说的，直接贴教程吧。



代码：


[cpp] view plain copy
<span style="font-family:KaiTi_GB2312;">#include <iostream>  
#include <string>  
#include <memory.h>  
  
using namespace std;  
const int Size=2000;  
int len[Size][Size];  
int main()  
{  
    string a,b;  
    int len1,len2;  
    while(cin>>len1>>a)  
    {  
        cin>>len2>>b;  
        memset(len,0,sizeof(len));  
        for(int i=1;i<=len1;i++)   len[i][0]=i;  
        for(int i=1;i<=len2;i++)   len[0][i]=i;  
  
        for(int i=1;i<=len1;i++){  
            for(int j=1;j<=len2;j++){  
                if(a[i-1]==b[j-1])  len[i][j]=len[i-1][j-1];  
                else    len[i][j]=min(min(len[i-1][j-1],len[i-1][j]),len[i][j-1])+1;  
            }  
        }  
        cout<<len[a.length()][b.length()]<<endl;  
    }  
    return 0;  
}  
</span>