矩形嵌套
时间限制：3000 ms  |  内存限制：65535 KB
难度：4
描述
有n个矩形，每个矩形可以用a,b来描述，表示长和宽。矩形X(a,b)可以嵌套在矩形Y(c,d)中当且仅当a<c,b<d或者b<c,a<d（相当于旋转X90度）。例如（1,5）可以嵌套在（6,2）内，但不能嵌套在（3,4）中。你的任务是选出尽可能多的矩形排成一行，使得除最后一个外，每一个矩形都可以嵌套在下一个矩形内。
输入
第一行是一个正正数N(0<N<10)，表示测试数据组数，
每组测试数据的第一行是一个正正数n，表示该组测试数据中含有矩形的个数(n<=1000)
随后的n行，每行有两个数a,b(0<a,b<100)，表示矩形的长和宽
输出
每组测试数据都输出一个数，表示最多符合条件的矩形数目，每组输出占一行
样例输入
1
10
1 2
2 4
5 8
6 10
7 9
3 1
5 8
12 10
9 7
2 2
样例输出
5
来源
经典题目
上传者
张云聪

题目分析：如果矩形x可以嵌套y，则从x到y连一条有向边，这样就得到一个DAG（边上的权值都为1）。这样，题目所求的即为DAG上的最长路径。

代码：
[cpp] view plain copy
#include <stdio.h>  
#include <string.h>  
#include <iostream>  
  
using namespace std;  
const int maxn=1000+100;  
int T,n;  
int G[maxn][maxn],d[maxn];  
  
struct Rec {  
    int l,w;  
};  
Rec rec[maxn];  
  
int dp(int i)  
{  
    int& ans=d[i];  
    if(ans) {  
        return ans;  
    }  
    ans=1;  
    for(int j=1; j<=n; j++) {  
        if(G[i][j]) {  
            ans=max(ans,dp(j)+1);  
        }  
    }  
    return ans;  
}  
  
void GreateGraph()  
{  
    for(int i=1; i<=n; i++) {  
        for(int j=1; j<=n; j++) {  
            if(rec[i].l>rec[j].l&&rec[i].w>rec[j].w) {  
                G[i][j]=1;  
            }  
        }  
    }  
}  
  
int main()  
{  
//freopen("in.txt","r",stdin);  
//freopen("out.txt","w",stdout);  
    cin>>T;  
    while(T--) {  
        cin>>n;  
        for(int i=1; i<=n; i++) {  
            cin>>rec[i].l>>rec[i].w;  
            if(rec[i].l<rec[i].w) {  
                swap(rec[i].l,rec[i].w);  
            }  
        }  
        memset(d,0,sizeof(d));  
        memset(G,0,sizeof(G));  
        GreateGraph();  
        int ans;  
        for(int i=1; i<=n; i++) {  
            if(i==1) {  
                ans=dp(i);  
            } else {  
                ans=max(ans,dp(i));  
            }  
        }  
        cout<<ans<<endl;  
    }  
    return 0;  
}  