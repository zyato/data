Common Subsequence
Time Limit: 1000MS	 	Memory Limit: 10000K
Total Submissions: 52634	 	Accepted: 21773
Description

A subsequence of a given sequence is the given sequence with some elements (possible none) left out. Given a sequence X = < x1, x2, ..., xm > another sequence Z = < z1, z2, ..., zk > is a subsequence of X if there exists a strictly increasing sequence < i1, i2, ..., ik > of indices of X such that for all j = 1,2,...,k, xij = zj. For example, Z = < a, b, f, c > is a subsequence of X = < a, b, c, f, b, c > with index sequence < 1, 2, 4, 6 >. Given two sequences X and Y the problem is to find the length of the maximum-length common subsequence of X and Y.
Input

The program input is from the std input. Each data set in the input contains two strings representing the given sequences. The sequences are separated by any number of white spaces. The input data are correct.
Output

For each set of data the program prints on the standard output the length of the maximum-length common subsequence from the beginning of a separate line.
Sample Input

abcfbc         abfcab
programming    contest 
abcd           mnp
Sample Output

4
2
0
Source

Southeastern Europe 2003

题目大意：给你两个字符串，求出他们两个最长共同子序列的长度。

题目分析：因为教程中有详细的解释，所以就不多说了。

代码：
[cpp] view plain copy
<span style="font-family:KaiTi_GB2312;">#include <iostream>  
#include <string>  
#include <memory.h>  
  
using namespace std;  
const int Size=1000;  
long long dp[Size][Size];  
int main()  
{  
    string str,str1,str2;  
    while(cin>>str1>>str2)  
    {  
        memset(dp,0,sizeof(dp));  
        for(unsigned int i=0;i<=str1.length();i++){  
            for(unsigned int j=0;j<=str2.length();j++){  
                if(!i||!j){  
                    dp[i][j]=0;  
                }  
                else if(str1[i-1]==str2[j-1]){  
                    dp[i][j]=dp[i-1][j-1]+1;  
                }  
                else{  
                    dp[i][j]=max(dp[i-1][j],dp[i][j-1]);  
                }  
            }  
        }  
        cout<<dp[str1.length()][str2.length()]<<endl;  
    }  
    return 0;  
}  
</span>  