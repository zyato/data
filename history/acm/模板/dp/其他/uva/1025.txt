题目链接：uva1025 

题目大意：现在有n个站点，一个人要从1站点到n站点（站点顺序可以看成是线性排列），要求花费的时间一定为T，现在给出由i站点到i+1站点的时间，接下来是n1个列车在1站点的发车时间和n2个列车在n站点的发车时间。现在要使等待的时间尽可能的短（没有在车上的时间），如果不能在T时刻到达n站台，输出impossible，否则输出最短等待时间。



题目分析：因为影响到决策的只有所有的时间和所处的车站，所以可以用d（i，j）表示时刻i，你在j车站，最少需要等待多长时间。边界条件是d（T，n）为0，其他时间为正无穷。因为时刻是正整数，所以可以有一下决策。

1.等待一分钟。

2.搭乘向右的列车。（如果有）

3.搭乘向左的列车。（如果有）

因为其中要判断某一时刻某一站点是否有某一方向的车，所以需要定义一个三维数组，至于这个值可以在输入的时候进行处理，具体可以看代码。

ps：以上为刘汝佳的算法竞赛入门经典的思路



代码：


[cpp] view plain copy
#include <stdio.h>  
#include <string.h>  
#include <iostream>  
  
using namespace std;  
const int maxn=500;  
const int INF=0x3f3f3f3f;  
///G:两个相邻的站点之间的距离  
///dp:时刻i在站点j所需等待的最小时间  
///i:时间 j:站点 k:方向 0:1->n 1:n->1  
int G[maxn],dp[maxn][maxn],has_train[maxn][maxn][3];  
  
int main()  
{  
    //freopen("in.txt","r",stdin);  
    //freopen("out.txt","w",stdout);  
    int n,T,n1,n2,t,Case=0;  
    while(cin>>n&&n)  
    {  
        ///约定的时间  
        cin>>T;  
        memset(has_train,0,sizeof(has_train));  
        for(int i=1;i<n;i++){  
            cin>>G[i];  
        }  
        cin>>n1;  
        for(int i=1;i<=n1;i++){  
            cin>>t;  
            for(int j=1;j<n;j++){  
                if(t<=T){  
                    has_train[t][j][0]=1;  
                }  
                t+=G[j];  
            }  
        }  
        cin>>n2;  
        for(int i=1;i<=n2;i++){  
            cin>>t;  
            for(int j=n-1;j>=1;j--){  
                if(t<=T){  
                    has_train[t][j+1][1]=1;  
                }  
                t+=G[j];  
            }  
        }  
        for(int i=1;i<n;i++){  
            dp[T][i]=INF;  
        }  
        dp[T][n]=0;  
        for(int i=T-1;i>=0;i--){  
            for(int j=1;j<=n;j++){  
                dp[i][j]=dp[i+1][j]+1;  
                ///向右  
                if(j<n&&has_train[i][j][0]&&i+G[j]<=T){  
                    dp[i][j]=min(dp[i][j],dp[i+G[j]][j+1]);  
                }  
                ///向左  
                if(j>1&&has_train[i][j][1]&&i+G[j-1]<=T){  
                    dp[i][j]=min(dp[i][j],dp[i+G[j-1]][j-1]);  
                }  
            }  
        }  
        cout<<"Case Number "<<++Case<<": ";  
        if(dp[0][1]>=INF){  
            cout<<"impossible"<<endl;  
        } else {  
            cout<<dp[0][1]<<endl;  
        }  
    }  
    return 0;  
}