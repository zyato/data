//二分查找radar的半径，然后用重复覆盖的DLX进行最多选取k行，判断该半径是否完全覆盖所有城市的判断
#include <cmath>
#include <cstdio>
#include <cstring>
#include <iostream>

using namespace std;

#define maxn 60
#define maxnode 3000
#define clr(x) memset(x,0,sizeof(x))
#define clrlow(x) memset(x,-1,sizeof(x))

struct DLX { //dancing links
    int n,m,Size,all;//all为解的行数的最大值
    int S[maxn],H[maxn],V[maxn];//S为每列元素个数，H指向每行末尾的元素，V是dep()函数的标记数组。
    int U[maxnode],D[maxnode],L[maxnode],R[maxnode],col[maxnode],row[maxnode];//元素上下左右对应列对应行的指针
    //初始化
    void init(int _n,int _m,int _all)
    {
        n=_n;
        m=_m;
        all=_all;
        for(int i=0; i<=m; i++) {
            L[i]=i-1;
            R[i]=i+1;
            U[i]=i;
            D[i]=i;
            row[i]=0;
            col[i]=i;
        }
        clr(S);
        clrlow(H);
        L[0]=m;
        R[m]=0;
        Size=m;
        return ;
    }
    //加入元素
    void push(int r,int c)
    {
        D[++Size]=D[c];
        col[Size]=U[Size]=c;
        U[D[c]]=Size;
        D[c]=Size;
        row[Size]=r;
        S[c]++;
        if(H[r]<0) {
            H[r]=L[Size]=R[Size]=Size;
        } 
        else {
            L[Size]=H[r];
            R[Size]=R[H[r]];
            L[R[H[r]]]=Size;
            R[H[r]]=Size;
        }
        return ;
    }
    //删除一列
    void del(int c)
    {
        S[col[c]]--;
        for(int i=D[c]; i!=c; i=D[i]) {
            R[L[i]]=R[i];
            L[R[i]]=L[i];
            S[col[i]]--;
        }
        return ;
    }
    //恢复一列
    void reback(int c)
    {
        for(int i=U[c]; i!=c; i=U[i]) {
            S[col[R[L[i]]=L[R[i]]=i]]++;
        }
        S[col[c]]++;
        return ;
    }
    //之后到达的最大深度
    //d为当前深度
    int  dep( )
    {
        clr(V);
        int deep=0;
        for(int i=R[0]; i!=0; i=R[i]){
            if(!V[i]) {
                deep++;
                for(int j=D[i]; j!=i; j=D[j]){
                    for(int k=R[j]; k!=j; k=R[k]) {
                        V[col[k]]=1;
                    }
                }
            }
        }
        return deep;
    }
    //dancing
    bool dancing(int d)
    {
        if(d+dep()>all) {
            return false;
        }
        int c=R[0];
        if(c==0) {
            return d<=all;
        }
        for(int i=R[0]; i!=0; i=R[i]){
            if(S[i]<S[c]) {
                c=i;
            }
        }
        for(int i=D[c]; i!=c; i=D[i]) {
            del(i);
            for(int j=R[i]; j!=i; j=R[j]) {
                del(j);
            }
            if(dancing(d+1)) {
                return true;
            }
            for(int j=L[i]; j!=i; j=L[j]) {
                reback(j);
            }
            reback(i);
        }
        return false;
    }
} dlx;

struct point {
    int x,y;
} station[maxn],city[maxn];

double dis(point a,point b)
{
    return (a.x-b.x)*(a.x-b.x)+(a.y-b.y)*(a.y-b.y);
}

int main()
{
    int n,m,k,kase;
    double lt,rt,mid;
    double eps=1e-8;
    scanf("%d",&kase);
    while(kase--) {
        scanf("%d%d%d",&n,&m,&k);
        for(int i=1; i<=n; i++) {
            scanf("%d%d",&city[i].x,&city[i].y);
        }
        for(int i=1; i<=m; i++) {
            scanf("%d%d",&station[i].x,&station[i].y);
        }
        lt=0;
        rt=1e8;
        while(rt-lt>=eps) {
            dlx.init(m,n,k);
            mid=(rt+lt)/2;
            for(int i=1; i<=m; i++){
                for(int j=1; j<=n; j++){
                    if(dis(city[j],station[i])<mid*mid-eps) {
                        dlx.push(i,j);
                    }
                }
            }
            if(dlx.dancing(0)) {
                rt=mid-eps;
            } 
            else {
                lt=mid+eps;
            }
        }
        printf("%.6lf\n",lt);
    }
    return 0;
}
