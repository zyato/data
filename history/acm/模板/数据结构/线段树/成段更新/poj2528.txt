				Mayor's posters
			      Time Limit: 1000MS	
			     Memory Limit: 65536K
                           Total Submissions: 70666	
                                Accepted: 20380
Description
The citizens of Bytetown, AB, could not stand that the candidates in the mayoral election campaign have been placing their electoral posters at all places at their whim. The city council has finally decided to build an electoral wall for placing the posters and introduce the following rules: 
Every candidate can place exactly one poster on the wall. 
All posters are of the same height equal to the height of the wall; the width of a poster can be any integer number of bytes (byte is the unit of length in Bytetown). 
The wall is divided into segments and the width of each segment is one byte. 
Each poster must completely cover a contiguous number of wall segments.

They have built a wall 10000000 bytes long (such that there is enough place for all candidates). When the electoral campaign was restarted, the candidates were placing their posters on the wall and their posters differed widely in width. Moreover, the candidates started placing their posters on wall segments already occupied by other posters. Everyone in Bytetown was curious whose posters will be visible (entirely or in part) on the last day before elections. 
Your task is to find the number of visible posters when all the posters are placed given the information about posters' size, their place and order of placement on the electoral wall. 
Input
The first line of input contains a number c giving the number of cases that follow. The first line of data for a single case contains number 1 <= n <= 10000. The subsequent n lines describe the posters in the order in which they were placed. The i-th line among the n lines contains two integer numbers li and ri which are the number of the wall segment occupied by the left end and the right end of the i-th poster, respectively. We know that for each 1 <= i <= n, 1 <= li <= ri <= 10000000. After the i-th poster is placed, it entirely covers all wall segments numbered li, li+1 ,... , ri.
Output
For each input data set print the number of visible posters after all the posters are placed. 

The picture below illustrates the case of the sample input. 

Sample Input
1
5
1 4
2 6
8 10
3 4
7 10
Sample Output
4
Source
Alberta Collegiate Programming Contest 2003.10.18
题目大意:
在墙上贴海报,海报可以互相覆盖,问最后可以看见几张海报

题目分析:
这题数据范围很大,直接搞超时+超内存,需要离散化:
离散化简单的来说就是只取我们需要的值来用,比如说区间[1000,2000],[1990,2012] 我们用不到[-∞,999][1001,1989][1991,1999][2001,2011][2013,+∞]这些值,所以我只需要1000,1990,2000,2012就够了,将其分别映射到0,1,2,3,在于复杂度就大大的降下来了
所以离散化要保存所有需要用到的值,排序后,分别映射到1~n,这样复杂度就会小很多很多
而这题的难点在于每个数字其实表示的是一个单位长度(并且一个点),这样普通的离散化会造成许多错误(包括我以前的代码,poj这题数据奇弱)
给出下面两个简单的例子应该能体现普通离散化的缺陷:
1-10 1-4 5-10
1-10 1-4 6-10
为了解决这种缺陷,我们可以在排序后的数组上加些处理,比如说[1,2,6,10]
如果相邻数字间距大于1的话,在其中加上任意一个数字,比如加成[1,2,3,6,7,10],然后再做线段树就好了.
线段树功能:update:成段替换 query:简单hash

#include <set>
#include <stdio.h>
#include <string.h>
#include <iostream>
#include <algorithm>

using namespace std;
#define lson l,m,rt<<1
#define rson m+1,r,rt<<1|1
const int maxn=20000;
int T,n,m,len;
set<int>s;
int Left[maxn],Right[maxn],col[maxn<<4],num[maxn*3];

void PushDown(int rt)
{
    if(col[rt]){
        col[rt<<1]=col[rt<<1|1]=col[rt];
        col[rt]=0;
    }
}

void update(int L,int R,int c,int l,int r,int rt)
{
    if(L<=l&&r<=R){
        col[rt]=c;
        return;
    }
    PushDown(rt);
    int m=(l+r)>>1;
    if(L<=m)    update(L,R,c,lson);
    if(R>m)     update(L,R,c,rson);
}

void query(int l,int r,int rt)
{
    if(col[rt]){
        s.insert(col[rt]);
        return;
    }
    if(l==r)    return;
    int m=(l+r)>>1;
    query(lson);
    query(rson);
}

void disperse()
{
    m=1;
    sort(num+1,num+len+1);
    for(int i=2;i<=len;i++){
        if(num[i]!=num[i-1]){
            num[++m]=num[i];
        }
    }
    for(int i=m;i>1;i--){
        if(num[i]-num[i-1]>1){
            num[++m]=num[i-1]+1;
        }
    }
    sort(num+1,num+m+1);
}

int Binary_Search(int key)
{
    int l=1,r=m,mid;
    while(l<=r)
    {
        mid=(l+r)/2;
        if(num[mid]==key)   return mid;
        if(num[mid]<key){
            l=mid+1;
        } else {
            r=mid-1;
        }
    }
    return -1;
}

int main()
{
//    freopen("in.txt","r",stdin);
//    freopen("out.txt","w",stdout);
    cin>>T;
    while(T--)
    {
        len=0;
        cin>>n;
        for(int i=1;i<=n;i++){
            cin>>Left[i]>>Right[i];
            num[++len]=Left[i];
            num[++len]=Right[i];
        }
        disperse();
        memset(col,0,sizeof(col));
        for(int i=1;i<=n;i++){
            int l=Binary_Search(Left[i]);
            int r=Binary_Search(Right[i]);
            update(l,r,i,1,m,1);
        }
        s.clear();
        query(1,m,1);
        cout<<(int)s.size()<<endl;
    }
    return 0;
}
