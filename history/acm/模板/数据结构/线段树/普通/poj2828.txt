Buy Tickets
Time Limit: 4000MS	 	Memory Limit: 65536K
Total Submissions: 21288	 	Accepted: 10431
Description

Railway tickets were difficult to buy around the Lunar New Year in China, so we must get up early and join a long queue…

The Lunar New Year was approaching, but unluckily the Little Cat still had schedules going here and there. Now, he had to travel by train to Mianyang, Sichuan Province for the winter camp selection of the national team of Olympiad in Informatics.

It was one o’clock a.m. and dark outside. Chill wind from the northwest did not scare off the people in the queue. The cold night gave the Little Cat a shiver. Why not find a problem to think about? That was none the less better than freezing to death!

People kept jumping the queue. Since it was too dark around, such moves would not be discovered even by the people adjacent to the queue-jumpers. “If every person in the queue is assigned an integral value and all the information about those who have jumped the queue and where they stand after queue-jumping is given, can I find out the final order of people in the queue?” Thought the Little Cat.

Input

There will be several test cases in the input. Each test case consists of N + 1 lines where N (1 ≤ N ≤ 200,000) is given in the first line of the test case. The next N lines contain the pairs of values Posi and Vali in the increasing order of i (1 ≤ i ≤ N). For each i, the ranges and meanings of Posi and Vali are as follows:

Posi ∈ [0, i ? 1] ― The i-th person came to the queue and stood right behind the Posi-th person in the queue. The booking office was considered the 0th person and the person at the front of the queue was considered the first person in the queue.
Vali ∈ [0, 32767] ― The i-th person was assigned the value Vali.
There no blank lines between test cases. Proceed to the end of input.

Output

For each test cases, output a single line of space-separated integers which are the values of people in the order they stand in the queue.

Sample Input

4
0 77
1 51
1 33
2 69
4
0 20523
1 19243
1 3890
0 31492
Sample Output

77 33 69 51
31492 20523 3890 19243
Hint

The figure below shows how the Little Cat found out the final order of people in the queue described in the first test case of the sample input.


Source

POJ Monthly--2006.05.28, Zhu, Zeyuan

题目大意：给出一个n，代表有n个人要预订办公室，然后每行给出两个数，第一个数代表这个人要排在第i个人后面（即这个人的位置要放在i+1处），第二个数代表这个人被分配的值，最后要求从左到右输出这些人的值。



题目分析：线段树的水题做了不少，但是做这个题还是感觉自己学的不够扎实，想了很久没什么思路，最后看了一下别人的博客。因为这个题如果按照正常思路的话，如果第i个人预定了办公室，必定会对原来的序列造成影响，改变这些被影响的人不仅需要大量的时间而且还非常难处理。但是如果我们倒着进行插入的话，则没有这种麻烦，数组里面储存的值则是空余的位置。知道这样还有一个要注意的点，因为搜索右子树时，左子树也能提供空办公室，所以此时这个人的位置为pos-tree[rt<<1]。



代码：


[cpp] view plain copy
#include <cmath>  
#include <vector>  
#include <string>  
#include <stdio.h>  
#include <string.h>  
#include <iostream>  
#include <algorithm>  
using namespace std;  
#define lson l,m,rt<<1  
#define rson m+1,r,rt<<1|1  
const int maxn=200000;  
int pos[maxn],val[maxn],ans[maxn],tree[maxn<<2];  
  
void PushUp(int rt)  
{  
    tree[rt]=tree[rt<<1]+tree[rt<<1|1];  
}  
  
void build(int l,int r,int rt)  
{  
    if(l==r){  
        tree[rt]=1;  
        return;  
    }  
    int m=(l+r)>>1;  
    build(lson);  
    build(rson);  
    PushUp(rt);  
}  
  
void update(int pos,int val,int l,int r,int rt)  
{  
    if(l==r){  
        tree[rt]--;  
        ans[l]=val;  
        return;  
    }  
    int m=(l+r)>>1;  
    if(pos<=tree[rt<<1])    update(pos,val,lson);  
    else    update(pos-tree[rt<<1],val,rson);  
    PushUp(rt);  
}  
  
int main()  
{  
    //freopen("in.txt","r",stdin);  
    //freopen("out.txt","w",stdout);  
    int n;  
    ios::sync_with_stdio(false);  
    while(cin>>n)  
    {  
        for(int i=1;i<=n;i++){  
            cin>>pos[i]>>val[i];  
        }  
        build(1,n,1);  
        for(int i=n;i>=1;i--){  
            update(pos[i]+1,val[i],1,n,1);  
        }  
        for(int i=1;i<=n;i++){  
            if(i==n){  
                cout<<ans[i]<<endl;  
                break;  
            }  
            cout<<ans[i]<<" ";  
        }  
    }  
    return 0;  
}  