I Hate It
Time Limit: 9000/3000 MS (Java/Others)    Memory Limit: 32768/32768 K (Java/Others)
Total Submission(s): 83334    Accepted Submission(s): 32040


Problem Description
很多学校流行一种比较的习惯。老师们很喜欢询问，从某某到某某当中，分数最高的是多少。
这让很多学生很反感。

不管你喜不喜欢，现在需要你做的是，就是按照老师的要求，写一个程序，模拟老师的询问。当然，老师有时候需要更新某位同学的成绩。
 

Input
本题目包含多组测试，请处理到文件结束。
在每个测试的第一行，有两个正整数 N 和 M ( 0<N<=200000,0<M<5000 )，分别代表学生的数目和操作的数目。
学生ID编号分别从1编到N。
第二行包含N个整数，代表这N个学生的初始成绩，其中第i个数代表ID为i的学生的成绩。
接下来有M行。每一行有一个字符 C (只取'Q'或'U') ，和两个正整数A，B。
当C为'Q'的时候，表示这是一条询问操作，它询问ID从A到B(包括A,B)的学生当中，成绩最高的是多少。
当C为'U'的时候，表示这是一条更新操作，要求把ID为A的学生的成绩更改为B。
 

Output
对于每一次询问操作，在一行里面输出最高成绩。
 

Sample Input
5 6
1 2 3 4 5
Q 1 5
U 3 6
Q 3 4
Q 4 5
U 2 9
Q 1 5
 

Sample Output
5
6
5
9

Hint
Huge input,the C function scanf() will work better than cin
 
 

Author
linle
 

Source
2007省赛集训队练习赛（6）_linle专场
 

Recommend
lcy   |   We have carefully selected several similar problems for you:  1698 1542 2795 1540 1255 

题目分析：线段树水题，直接用模板。

代码：
[cpp] view plain copy
#include <iostream>  
#include <cstdio>  
#include <cstring>  
#include <algorithm>  
using namespace std;  
#define lson l,m,rt<<1  
#define rson m+1,r,rt<<1|1  
const int maxn=200000+100;  
int sum[maxn<<2];  
  
void PushUp(int rt)  
{  
    sum[rt]=max(sum[rt<<1],sum[rt<<1|1]);  
}  
  
void build(int l,int r,int rt)  
{  
    if(l==r){  
        scanf("%d",&sum[rt]);  
        return;  
    }  
    int m=(l+r)>>1;  
    build(lson);  
    build(rson);  
    PushUp(rt);  
}  
  
void update(int p,int add,int l,int r,int rt)  
{  
    if(l==r){  
        sum[rt]=max(sum[rt],add);  
        return;  
    }  
    int m=(l+r)>>1;  
    if(p<=m)    update(p,add,lson);  
    else        update(p,add,rson);  
    PushUp(rt);  
}  
  
int query(int L,int R,int l,int r,int rt)  
{  
    if(L<=l&&r<=R){  
        return sum[rt];  
    }  
    int ans=0;  
    int m=(l+r)>>1;  
    if(L<=m)    ans=max(ans,query(L,R,lson));  
    if(R>m)     ans=max(ans,query(L,R,rson));  
    return ans;  
}  
  
int main()  
{  
    //freopen("in.txt","r",stdin);  
    //freopen("out.txt","w",stdout);  
    int n,m;  
    while(cin>>n>>m)  
    {  
        char ch;  
        int a,b;  
        build(1,n,1);  
        for(int i=0;i<m;i++){  
            cin>>ch>>a>>b;  
            if(ch=='U'){  
                update(a,b,1,n,1);  
            } else {  
                printf("%d\n",query(a,b,1,n,1));  
            }  
        }  
    }  
    return 0;  
}  