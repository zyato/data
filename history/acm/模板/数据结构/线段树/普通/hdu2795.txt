Billboard
Time Limit: 20000/8000 MS (Java/Others)    Memory Limit: 32768/32768 K (Java/Others)
Total Submission(s): 24612    Accepted Submission(s): 10115


Problem Description
At the entrance to the university, there is a huge rectangular billboard of size h*w (h is its height and w is its width). The board is the place where all possible announcements are posted: nearest programming competitions, changes in the dining room menu, and other important information.

On September 1, the billboard was empty. One by one, the announcements started being put on the billboard.

Each announcement is a stripe of paper of unit height. More specifically, the i-th announcement is a rectangle of size 1 * wi.

When someone puts a new announcement on the billboard, she would always choose the topmost possible position for the announcement. Among all possible topmost positions she would always choose the leftmost one.

If there is no valid location for a new announcement, it is not put on the billboard (that's why some programming contests have no participants from this university).

Given the sizes of the billboard and the announcements, your task is to find the numbers of rows in which the announcements are placed.
 

Input
There are multiple cases (no more than 40 cases).

The first line of the input file contains three integer numbers, h, w, and n (1 <= h,w <= 10^9; 1 <= n <= 200,000) - the dimensions of the billboard and the number of announcements.

Each of the next n lines contains an integer number wi (1 <= wi <= 10^9) - the width of i-th announcement.
 

Output
For each announcement (in the order they are given in the input file) output one number - the number of the row in which this announcement is placed. Rows are numbered from 1 to h, starting with the top row. If an announcement can't be put on the billboard, output "-1" for this announcement.
 

Sample Input
3 5 5
2
4
3
3
3
 

Sample Output
1
2
1
3
-1
 

Author
hhanger@zju
 

Source
HDOJ 2009 Summer Exercise（5）
 

Recommend
lcy   |   We have carefully selected several similar problems for you:  1698 1542 1828 1540 1255 

题目大意：现在有一个长宽分别为h，w的板子，现在要往上粘贴1xw的纸，粘贴时优先选择上方，上方有足够的空间则优先选择左边，现在对于每张纸输出他们被贴在哪一行，如果不能被粘贴，输出-1.

题目分析：感觉自己线段树学的还不够扎实，知道是线段树的题目还想不出思路。
利用线段树可以求区间的最大值; 
将位置即h用来建树(h<=n,大了没有意义); 
树中存储的为该位置还拥有的空间; 
若左子树的最大值大于他,就查询左子树，否则查询右子树;

代码：
[cpp] view plain copy
#include <iostream>  
#include <cstdio>  
#include <cstring>  
#include <algorithm>  
using namespace std;  
#define lson l,m,rt<<1  
#define rson m+1,r,rt<<1|1  
const int maxn=200000;  
int h,w,n,x;  
int sum[maxn<<2];  
  
void build(int l,int r,int rt)  
{  
    sum[rt]=w;  
    if(l==r){  
        return;  
    }  
    int m=(l+r)>>1;  
    build(lson);  
    build(rson);  
}  
  
int query(int x,int l,int r,int rt)  
{  
    if(l==r){  
        sum[rt]-=x;  
        return l;  
    }  
    int m=(l+r)>>1;  
    int ans=sum[rt<<1]>=x?query(x,lson):query(x,rson);  
    sum[rt]=max(sum[rt<<1],sum[rt<<1|1]);  
    return ans;  
}  
  
int main()  
{  
    //freopen("in.txt","r",stdin);  
    //freopen("out.txt","w",stdout);  
    while(scanf("%d%d%d",&h,&w,&n)!=EOF)  
    {  
        if(h>n) h=n;  
        build(1,h,1);  
        while(n--)  
        {  
            scanf("%d",&x);  
            if(sum[1]<x)    printf("-1\n");  
            else            printf("%d\n",query(x,1,h,1));  
        }  
    }  
    return 0;  
}  